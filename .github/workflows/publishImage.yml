# .github/workflows/publishImage.yml
name: Publish Docker Image

on:
  push:
    branches:
      - 'Holaf_tests' # Déclenche pour la branche Holaf_tests
    tags:
      - '*.*.*'       # Déclenche pour les tags (pour la version main)
    # Si tu veux ignorer les changements de .md pour ces événements push:
    paths-ignore:
      - '**.md'

  workflow_dispatch: # Permet un déclenchement manuel de ce workflow

jobs:
  # Il n'y a plus de job build_compile_environment ici,
  # car l'image buildenv est gérée manuellement ou par un workflow séparé.

  build_holaf_tests_image:
    name: Build Holaf_tests Docker Image
    if: github.event_name == 'push' && github.ref == 'refs/heads/Holaf_tests'
    runs-on: ubuntu-latest
    permissions:
      packages: write 
      contents: read   
    steps:
      - name: Check out the Holaf_tests branch
        uses: actions/checkout@v4

      - name: Log in to Docker Hub (Holaf_tests)
        if: vars.DOCKERHUB_IMAGE_NAME != '' && secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry (Holaf_tests)
        if: vars.GHCR_IMAGE_NAME != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Holaf_tests image
        id: meta-holaf-tests
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ vars.DOCKERHUB_IMAGE_NAME }}
            ${{ vars.GHCR_IMAGE_NAME }}
          tags: |
            type=raw,value=holaf_tests 
            type=sha,prefix=holaf_tests-,suffix=,format=short 

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Holaf_tests image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile 
          push: true 
          tags: ${{ steps.meta-holaf-tests.outputs.tags }}
          labels: ${{ steps.meta-holaf-tests.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build_main_image_on_tag:
    name: Build Main Docker Image (on Tag)
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      packages: write 
      contents: read   
    steps:
      - name: Check out the tagged commit
        uses: actions/checkout@v4

      - name: Log in to Docker Hub (Main Tag)
        if: vars.DOCKERHUB_IMAGE_NAME != '' && secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry (Main Tag)
        if: vars.GHCR_IMAGE_NAME != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Main (tag) image
        id: meta-main-tag
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ vars.DOCKERHUB_IMAGE_NAME }}
            ${{ vars.GHCR_IMAGE_NAME }}
          tags: | 
            type=raw,value=latest 
            type=semver,pattern={{version}} 
            type=ref,event=tag # Ajoute un tag avec le nom exact du tag Git (ex: v1.2.3 -> v1.2.3)

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Main (tag) image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile 
          push: true 
          tags: ${{ steps.meta-main-tag.outputs.tags }}
          labels: ${{ steps.meta-main-tag.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  build_manual_dispatch_image:
    name: Build Docker Image (Manual Dispatch)
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      packages: write 
      contents: read   
    steps:
      - name: Check out repository (branch from dispatch)
        uses: actions/checkout@v4
        with:
          # github.ref contiendra refs/heads/branch-name pour un dispatch sur une branche
          ref: ${{ github.ref }} 

      - name: Log in to Docker Hub (Manual)
        if: vars.DOCKERHUB_IMAGE_NAME != '' && secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry (Manual)
        if: vars.GHCR_IMAGE_NAME != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Manual Dispatch image
        id: meta-manual
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ vars.DOCKERHUB_IMAGE_NAME }}
            ${{ vars.GHCR_IMAGE_NAME }}
          tags: |
            type=ref,event=branch,prefix=manual- # Ex: manual-main, manual-Holaf_tests
            type=sha,prefix=manual-sha-,format=short # Ex: manual-sha-abcdef

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Manual Dispatch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile 
          push: true
          tags: ${{ steps.meta-manual.outputs.tags }}
          labels: ${{ steps.meta-manual.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max