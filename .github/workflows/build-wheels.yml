# .github/workflows/build-wheels.yml
name: Build Python Wheels

on:
  workflow_dispatch: # Permet un déclenchement manuel
  push:
    branches:
      - main 
      - Holaf_tests 
    paths:
      - 'Dockerfile'
      - '.github/workflows/build-wheels.yml'

jobs:
  compile_wheels:
    runs-on: ubuntu-latest
    container:
      image: nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Initial workspace check
        run: |
          echo "Initial PWD: $(pwd)"
          echo "Initial ls -la (should show .git):"
          ls -la 

      - name: Install build dependencies (Python, pip, compilers)
        run: |
          apt-get update
          apt-get install -y -q=2 --no-install-recommends \
            software-properties-common \
            python3.11 python3.11-distutils python3.11-venv python3-pip python3.11-dev \
            wget git cmake build-essential gcc-12 g++-12 ninja-build
          update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
          update-alternatives --set python3 /usr/bin/python3.11
          update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1
          update-alternatives --set python /usr/bin/python3.11
          python3 -m pip install --upgrade pip
          pip3 install torch==2.6.0 torchvision packaging cython==0.29.37

      - name: Set Build Environment Variables
        run: |
          echo "CC=/usr/bin/gcc-12" >> $GITHUB_ENV
          echo "CXX=/usr/bin/g++-12" >> $GITHUB_ENV
          echo "TORCH_CUDA_ARCH_LIST=8.6 8.9 9.0" >> $GITHUB_ENV
          echo "CUDA_HOME=/usr/local/cuda" >> $GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=/usr/local/cuda/include${CPLUS_INCLUDE_PATH:+:${CPLUS_INCLUDE_PATH}}" >> $GITHUB_ENV
          echo "LIBRARY_PATH=/usr/local/cuda/lib64${LIBRARY_PATH:+:${LIBRARY_PATH}}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" >> $GITHUB_ENV
          echo "NVIDIA_DRIVER_CAPABILITIES=compute,utility" >> $GITHUB_ENV
          echo "NVIDIA_VISIBLE_DEVICES=all" >> $GITHUB_ENV

      - name: Create temporary wheels directory
        run: mkdir -p wheels_output

      - name: Build flash-attention wheel
        shell: bash 
        run: |
          WORK_DIR=$(pwd)
          echo "Building flash-attention, WORK_DIR is $WORK_DIR, ls -la .git check:" && ls -la .git || echo ".git not found before flash-attention clone"
          git clone https://github.com/Dao-AILab/flash-attention --recurse-submodules
          cd flash-attention
          python3 setup.py bdist_wheel
          cp dist/*.whl $WORK_DIR/wheels_output/
          cd $WORK_DIR 
          rm -rf flash-attention
          echo "After flash-attention build, PWD is $(pwd) and ls -la (checking .git):"
          ls -la

      - name: Check for cuda_runtime.h before diso build # (Step inchangé, supposé OK maintenant)
        run: |
          if [ -f /usr/local/cuda/include/cuda_runtime.h ]; then
            echo "cuda_runtime.h found"
          else
            echo "cuda_runtime.h NOT found" && ls -la /usr/local/cuda/include/ && exit 1 
          fi
          nvcc --version || echo "nvcc not found"

      - name: Build diso wheel # (et les autres builds de wheels...)
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          echo "Building diso, WORK_DIR is $WORK_DIR, ls -la .git check:" && ls -la .git || echo ".git not found before diso clone"
          git clone https://github.com/SarahWeiii/diso --recurse-submodules
          cd diso
          python3 setup.py bdist_wheel
          cp dist/*.whl $WORK_DIR/wheels_output/
          cd $WORK_DIR
          rm -rf diso
          echo "After diso build, PWD is $(pwd) and ls -la (checking .git):"
          ls -la
          
      - name: Build nvdiffrast wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          echo "Building nvdiffrast, WORK_DIR is $WORK_DIR, ls -la .git check:" && ls -la .git || echo ".git not found before nvdiffrast clone"
          git clone https://github.com/NVlabs/nvdiffrast.git
          cd nvdiffrast
          python3 setup.py bdist_wheel
          cp dist/*.whl $WORK_DIR/wheels_output/
          cd $WORK_DIR
          rm -rf nvdiffrast
          echo "After nvdiffrast build, PWD is $(pwd) and ls -la (checking .git):"
          ls -la

      - name: Build kaolin wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          echo "Building kaolin, WORK_DIR is $WORK_DIR, ls -la .git check:" && ls -la .git || echo ".git not found before kaolin clone"
          git clone https://github.com/NVIDIAGameWorks/kaolin.git
          cd kaolin
          python3 setup.py bdist_wheel
          cp dist/*.whl $WORK_DIR/wheels_output/
          cd $WORK_DIR
          rm -rf kaolin
          echo "After kaolin build, PWD is $(pwd) and ls -la (checking .git):"
          ls -la

      - name: Build mip-splatting (diff-gaussian-rasterization) wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          echo "Building mip-splatting, WORK_DIR is $WORK_DIR, ls -la .git check:" && ls -la .git || echo ".git not found before mip-splatting clone"
          git clone https://github.com/autonomousvision/mip-splatting --recurse-submodules
          cd mip-splatting/submodules/diff-gaussian-rasterization
          python3 setup.py bdist_wheel
          cp dist/*.whl $WORK_DIR/wheels_output/ 
          cd $WORK_DIR
          rm -rf mip-splatting 
          echo "After mip-splatting build, PWD is $(pwd) and ls -la (checking .git):"
          ls -la

      - name: Build TRELLIS (vox2seq) wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          echo "Building TRELLIS, WORK_DIR is $WORK_DIR, ls -la .git check:" && ls -la .git || echo ".git not found before TRELLIS clone"
          git clone https://github.com/microsoft/TRELLIS --recurse-submodules
          cd TRELLIS/extensions/vox2seq
          python3 setup.py bdist_wheel
          cp dist/*.whl $WORK_DIR/wheels_output/
          cd $WORK_DIR
          rm -rf TRELLIS 
          echo "After TRELLIS build, PWD is $(pwd) and ls -la (checking .git):"
          ls -la
      
      - name: Commit wheels to repository
        shell: bash
        run: |
          ACTUAL_GIT_DIR_PATH=$(pwd) # Devrait être /__w/stable-diffusion/stable-diffusion ou /github/workspace
          echo "Current directory before git commands: $ACTUAL_GIT_DIR_PATH"
          echo "Content of current directory (ls -la):"
          ls -la $ACTUAL_GIT_DIR_PATH
          
          # Configurer le dépôt comme sûr AVANT toute opération Git
          # Utiliser le chemin absolu résolu par pwd
          echo "Adding $ACTUAL_GIT_DIR_PATH to git safe.directory"
          git config --global --add safe.directory "$ACTUAL_GIT_DIR_PATH"
          
          # Vérifier à nouveau avec git rev-parse après avoir configuré safe.directory
          if ! git -C "$ACTUAL_GIT_DIR_PATH" rev-parse --is-inside-work-tree > /dev/null 2>&1; then
            echo "ERROR: Still not a git repository according to 'git rev-parse --is-inside-work-tree' in $ACTUAL_GIT_DIR_PATH even after setting safe.directory."
            # Si cela échoue, le problème est plus profond que safe.directory, .git est vraiment manquant ou corrompu.
            exit 1
          fi
          echo ".git directory confirmed by 'git rev-parse' for $ACTUAL_GIT_DIR_PATH after setting safe.directory."

          mkdir -p precompiled_wheels # Relatif au $ACTUAL_GIT_DIR_PATH
          cp wheels_output/*.whl precompiled_wheels/ # Relatif
          
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Les commandes git suivantes s'exécuteront dans $ACTUAL_GIT_DIR_PATH
          git add precompiled_wheels/*.whl
          
          if ! git diff --staged --quiet; then
            git commit -m "Build: Update precompiled Python wheels"
            git push
          else
            echo "No new wheels to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}