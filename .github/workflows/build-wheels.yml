# .github/workflows/build-wheels.yml
name: Build Python Wheels

on:
  workflow_dispatch: # Permet un déclenchement manuel
  push:
    branches:
      - main 
      - Holaf_tests 
    paths:
      - 'Dockerfile'
      - '.github/workflows/build-wheels.yml'

jobs:
  compile_wheels:
    runs-on: ubuntu-latest
    container:
      image: nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Assurer un clone complet

      - name: Initial workspace check
        run: |
          echo "Initial PWD: $(pwd)"
          echo "Initial ls -la:"
          ls -la # Doit montrer .git ici

      - name: Install build dependencies (Python, pip, compilers)
        run: |
          apt-get update
          apt-get install -y -q=2 --no-install-recommends \
            software-properties-common \
            python3.11 python3.11-distutils python3.11-venv python3-pip python3.11-dev \
            wget git cmake build-essential gcc-12 g++-12 ninja-build
          update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
          update-alternatives --set python3 /usr/bin/python3.11
          update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1
          update-alternatives --set python /usr/bin/python3.11
          python3 -m pip install --upgrade pip
          pip3 install torch==2.6.0 torchvision packaging cython==0.29.37

      - name: Set Build Environment Variables
        run: |
          echo "CC=/usr/bin/gcc-12" >> $GITHUB_ENV
          echo "CXX=/usr/bin/g++-12" >> $GITHUB_ENV
          echo "TORCH_CUDA_ARCH_LIST=8.6 8.9 9.0" >> $GITHUB_ENV
          echo "CUDA_HOME=/usr/local/cuda" >> $GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=/usr/local/cuda/include${CPLUS_INCLUDE_PATH:+:${CPLUS_INCLUDE_PATH}}" >> $GITHUB_ENV
          echo "LIBRARY_PATH=/usr/local/cuda/lib64${LIBRARY_PATH:+:${LIBRARY_PATH}}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" >> $GITHUB_ENV
          echo "NVIDIA_DRIVER_CAPABILITIES=compute,utility" >> $GITHUB_ENV
          echo "NVIDIA_VISIBLE_DEVICES=all" >> $GITHUB_ENV

      - name: Create temporary wheels directory
        run: mkdir -p wheels_output

      - name: Build flash-attention wheel
        shell: bash # Assurer bash pour WORK_DIR=$(pwd)
        run: |
          WORK_DIR=$(pwd)
          echo "Building flash-attention, WORK_DIR is $WORK_DIR"
          git clone https://github.com/Dao-AILab/flash-attention --recurse-submodules
          cd flash-attention
          python3 setup.py bdist_wheel
          cp dist/*.whl $WORK_DIR/wheels_output/
          cd $WORK_DIR 
          rm -rf flash-attention
          echo "After flash-attention build, PWD is $(pwd) and ls -la:"
          ls -la

      - name: Check for cuda_runtime.h before diso build
        run: |
          if [ -f /usr/local/cuda/include/cuda_runtime.h ]; then
            echo "cuda_runtime.h found"
          else
            echo "cuda_runtime.h NOT found" && ls -la /usr/local/cuda/include/ && exit 1 
          fi
          nvcc --version || echo "nvcc not found"

      - name: Build diso wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          echo "Building diso, WORK_DIR is $WORK_DIR"
          git clone https://github.com/SarahWeiii/diso --recurse-submodules
          cd diso
          python3 setup.py bdist_wheel
          cp dist/*.whl $WORK_DIR/wheels_output/
          cd $WORK_DIR
          rm -rf diso
          echo "After diso build, PWD is $(pwd) and ls -la:"
          ls -la
          
      - name: Build nvdiffrast wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          git clone https://github.com/NVlabs/nvdiffrast.git
          cd nvdiffrast
          python3 setup.py bdist_wheel
          cp dist/*.whl $WORK_DIR/wheels_output/
          cd $WORK_DIR
          rm -rf nvdiffrast
          echo "After nvdiffrast build, PWD is $(pwd) and ls -la:"
          ls -la

      - name: Build kaolin wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          git clone https://github.com/NVIDIAGameWorks/kaolin.git
          cd kaolin
          python3 setup.py bdist_wheel
          cp dist/*.whl $WORK_DIR/wheels_output/
          cd $WORK_DIR
          rm -rf kaolin
          echo "After kaolin build, PWD is $(pwd) and ls -la:"
          ls -la

      - name: Build mip-splatting (diff-gaussian-rasterization) wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          git clone https://github.com/autonomousvision/mip-splatting --recurse-submodules
          cd mip-splatting/submodules/diff-gaussian-rasterization
          python3 setup.py bdist_wheel
          # Le cp doit aller vers $WORK_DIR/wheels_output, pas besoin de ../../../ si on utilise WORK_DIR
          cp dist/*.whl $WORK_DIR/wheels_output/ 
          cd $WORK_DIR
          rm -rf mip-splatting # rm -rf $WORK_DIR/mip-splatting serait plus sûr
          echo "After mip-splatting build, PWD is $(pwd) and ls -la:"
          ls -la

      - name: Build TRELLIS (vox2seq) wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          git clone https://github.com/microsoft/TRELLIS --recurse-submodules
          cd TRELLIS/extensions/vox2seq
          python3 setup.py bdist_wheel
          cp dist/*.whl $WORK_DIR/wheels_output/
          cd $WORK_DIR
          rm -rf TRELLIS # rm -rf $WORK_DIR/TRELLIS
          echo "After TRELLIS build, PWD is $(pwd) and ls -la:"
          ls -la
      
      - name: Commit wheels to repository
        shell: bash
        run: |
          echo "Current directory before git commands: $(pwd)"
          echo "Content of current directory (ls -la):"
          ls -la 
          
          if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
            echo "ERROR: Not a git repository according to 'git rev-parse --is-inside-work-tree' in $(pwd)."
            exit 1
          fi
          echo ".git directory confirmed by 'git rev-parse'."

          mkdir -p precompiled_wheels 
          cp wheels_output/*.whl precompiled_wheels/
          
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Le répertoire courant "$(pwd)" devrait être la racine du dépôt, déjà sûr.
          # git config --global --add safe.directory "$(pwd)" # Peut-être pas nécessaire si on est bien dans le bon user/contexte

          git add precompiled_wheels/*.whl
          
          if ! git diff --staged --quiet; then
            git commit -m "Build: Update precompiled Python wheels"
            git push
          else
            echo "No new wheels to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}