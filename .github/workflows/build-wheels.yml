# .github/workflows/build-wheels.yml
name: Build Python Wheels (Manual)

on:
  workflow_dispatch: # Uniquement déclenchement manuel
    inputs:
      branch_to_commit_wheels:
        description: 'Branch to checkout and commit wheels to (e.g., main, Holaf_tests)'
        required: true
        default: 'main'

jobs:
  compile_and_commit_wheels:
    name: Compile and Commit Wheels
    runs-on: ubuntu-latest
    container:
      # S'assurer que cette image existe et est accessible sur GHCR
      image: ghcr.io/${{ github.repository_owner }}/stable-diffusion-buildenv:latest 
    
    steps:
      - name: Checkout specific branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch_to_commit_wheels }} # Checkout la branche spécifiée
          fetch-depth: 0 # Nécessaire pour le commit

      - name: Verify .git folder after checkout
        run: |
          ls -la
          if [ ! -d ".git" ]; then echo "ERROR: .git NOT FOUND!"; exit 1; fi
          echo ".git folder found!"

      - name: Create temporary wheels directory
        run: mkdir -p wheels_output

      # --- Steps de build des wheels (identiques à avant) ---
      - name: Build flash-attention wheel
        shell: bash 
        run: |
          WORK_DIR=$(pwd); REPO_NAME="flash-attention"; git clone https://github.com/Dao-AILab/flash-attention --recurse-submodules "$REPO_NAME"; cd "$REPO_NAME"; python3 setup.py bdist_wheel; cp dist/*.whl "$WORK_DIR/wheels_output/"; cd "$WORK_DIR"; rm -rf "$WORK_DIR/$REPO_NAME"
      - name: Build diso wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd); REPO_NAME="diso"; git clone https://github.com/SarahWeiii/diso --recurse-submodules "$REPO_NAME"; cd "$REPO_NAME"; python3 setup.py bdist_wheel; cp dist/*.whl "$WORK_DIR/wheels_output/"; cd "$WORK_DIR"; rm -rf "$WORK_DIR/$REPO_NAME"
      - name: Build nvdiffrast wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd); REPO_NAME="nvdiffrast"; git clone https://github.com/NVlabs/nvdiffrast.git "$REPO_NAME"; cd "$REPO_NAME"; python3 setup.py bdist_wheel; cp dist/*.whl "$WORK_DIR/wheels_output/"; cd "$WORK_DIR"; rm -rf "$WORK_DIR/$REPO_NAME"
      - name: Build kaolin wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd); REPO_NAME="kaolin"; export FORCE_CUDA=1; git clone https://github.com/NVIDIAGameWorks/kaolin.git "$REPO_NAME"; cd "$REPO_NAME"; python3 setup.py bdist_wheel; cp dist/*.whl "$WORK_DIR/wheels_output/"; cd "$WORK_DIR"; rm -rf "$WORK_DIR/$REPO_NAME"
      - name: Build mip-splatting (diff-gaussian-rasterization) wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd); REPO_NAME="mip-splatting"; CLONE_TARGET_PATH="$WORK_DIR/$REPO_NAME"; SUB_DIR_BUILD_PATH="$CLONE_TARGET_PATH/submodules/diff-gaussian-rasterization"; git clone https://github.com/autonomousvision/mip-splatting --recurse-submodules "$CLONE_TARGET_PATH"; cd "$SUB_DIR_BUILD_PATH"; python3 setup.py bdist_wheel; cp dist/*.whl "$WORK_DIR/wheels_output/"; cd "$WORK_DIR"; rm -rf "$CLONE_TARGET_PATH" 
      - name: Build TRELLIS (vox2seq) wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd); REPO_NAME="TRELLIS"; CLONE_TARGET_PATH="$WORK_DIR/$REPO_NAME"; SUB_DIR_BUILD_PATH="$CLONE_TARGET_PATH/extensions/vox2seq"; git clone https://github.com/microsoft/TRELLIS --recurse-submodules "$CLONE_TARGET_PATH"; cd "$SUB_DIR_BUILD_PATH"; python3 setup.py bdist_wheel; cp dist/*.whl "$WORK_DIR/wheels_output/"; cd "$WORK_DIR"; rm -rf "$CLONE_TARGET_PATH"
      
      - name: Commit wheels to repository
        shell: bash
        run: |
          git config --global --add safe.directory "$(pwd)" 
          if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then echo "ERROR: Not a git repository."; exit 1; fi
          mkdir -p precompiled_wheels 
          cp wheels_output/*.whl precompiled_wheels/ 
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add precompiled_wheels/*.whl
          if ! git diff --staged --quiet; then
            git commit -m "Build: Update precompiled Python wheels (manual trigger)"
            # Push vers la branche spécifiée lors du déclenchement manuel
            git push origin ${{ github.event.inputs.branch_to_commit_wheels }} 
          else
            echo "No new wheels to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}