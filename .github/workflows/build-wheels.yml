# .github/workflows/build-wheels.yml
name: Build Python Wheels

on:
  workflow_dispatch:
  push:
    branches:
      - main 
      - Holaf_tests 
    paths:
      - 'Dockerfile' # Ou un Dockerfile spécifique pour le build des wheels si tu en crées un
      - '.github/workflows/build-wheels.yml'

jobs:
  compile_wheels:
    runs-on: ubuntu-latest # Exécuteur standard

    steps:
      # 1. Installer CUDA sur l'exécuteur (plus long, mais donne le contrôle)
      #    Ou trouver une action qui le fait, ex: https://github.com/marketplace/actions/setup-cuda
      #    Pour l'instant, on va supposer que les étapes de build peuvent se faire sans GPU actif,
      #    juste avec le toolkit CUDA installé pour les headers et libs.
      #    Si nvcc est nécessaire pour la compilation (pas juste les headers), CUDA doit être pleinement fonctionnel.

      - name: Install CUDA Toolkit (Exemple, peut nécessiter ajustement)
        run: |
          # Ceci est un exemple, la méthode d'installation peut varier
          # et être longue. Idéalement, l'image de base nvidia/cuda est mieux si elle fonctionne.
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get -y install cuda-toolkit-12-4 # Ajuster la version si besoin
          echo "/usr/local/cuda/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" >> $GITHUB_ENV
          echo "CUDA_HOME=/usr/local/cuda" >> $GITHUB_ENV

      # 2. Installer Git explicitement (l'exécuteur ubuntu-latest l'a déjà, mais pour être sûr)
      - name: Install Git and build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y git build-essential gcc-12 g++-12 ninja-build wget cmake \
                                python3.11 python3.11-distutils python3.11-venv python3-pip python3.11-dev
          sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
          sudo update-alternatives --set python3 /usr/bin/python3.11
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1
          sudo update-alternatives --set python /usr/bin/python3.11
          python3 -m pip install --upgrade pip
          pip3 install torch==2.6.0 torchvision packaging cython==0.29.37

      # 3. Maintenant, checkout DOIT utiliser Git
      - name: Checkout repository
        uses: actions/checkout@v4
        # fetch-depth: 0 est le défaut pour les push/workflow_dispatch, mais on peut le forcer.
        with:
          fetch-depth: 0 

      - name: Verify .git folder after checkout
        run: |
          echo "PWD after checkout: $(pwd)"
          ls -la
          if [ -d ".git" ]; then
            echo ".git folder found!"
          else
            echo "ERROR: .git folder NOT found after checkout!"
            exit 1
          fi
          git --version # Vérifier la version de git utilisée

      - name: Set Build Environment Variables # (Identique à avant, mais sans $GITHUB_ENV pour PATHs car déjà fait)
        run: |
          echo "CC=/usr/bin/gcc-12" >> $GITHUB_ENV
          echo "CXX=/usr/bin/g++-12" >> $GITHUB_ENV
          echo "TORCH_CUDA_ARCH_LIST=8.6 8.9 9.0" >> $GITHUB_ENV
          # CUDA_HOME et LD_LIBRARY_PATH sont déjà dans GITHUB_ENV via le step d'install CUDA
          # Mais CPLUS_INCLUDE_PATH et LIBRARY_PATH peuvent encore être utiles pour g++
          echo "CPLUS_INCLUDE_PATH=/usr/local/cuda/include${CPLUS_INCLUDE_PATH:+:${CPLUS_INCLUDE_PATH}}" >> $GITHUB_ENV
          echo "LIBRARY_PATH=/usr/local/cuda/lib64${LIBRARY_PATH:+:${LIBRARY_PATH}}" >> $GITHUB_ENV
          # NVIDIA_DRIVER_CAPABILITIES et NVIDIA_VISIBLE_DEVICES ne sont pertinents que si un GPU est utilisé
          # echo "NVIDIA_DRIVER_CAPABILITIES=compute,utility" >> $GITHUB_ENV
          # echo "NVIDIA_VISIBLE_DEVICES=all" >> $GITHUB_ENV

      - name: Create temporary wheels directory
        run: mkdir -p wheels_output

      # Les steps de build des wheels (flash-attention, diso, etc.) restent les mêmes
      # que dans la version précédente (avec WORK_DIR, REPO_NAME, etc.)
      # Exemple pour flash-attention:
      - name: Build flash-attention wheel
        shell: bash 
        run: |
          WORK_DIR=$(pwd)
          REPO_NAME="flash-attention"
          echo "Building $REPO_NAME, WORK_DIR is $WORK_DIR."
          git clone https://github.com/Dao-AILab/flash-attention --recurse-submodules "$REPO_NAME"
          cd "$REPO_NAME"
          python3 setup.py bdist_wheel
          cp dist/*.whl "$WORK_DIR/wheels_output/"
          cd "$WORK_DIR" 
          rm -rf "$WORK_DIR/$REPO_NAME"
      # ... Répéter pour les autres wheels diso, nvdiffrast, kaolin, mip-splatting, TRELLIS ...
      # Assurer que les `cd` et `rm` sont corrects.

      - name: Commit wheels to repository # (Devrait fonctionner maintenant car .git sera là)
        shell: bash
        run: |
          ACTUAL_GIT_DIR_PATH=$(pwd) 
          echo "Current directory before git commands: $ACTUAL_GIT_DIR_PATH"
          echo "Content of current directory (ls -la):"
          ls -la "$ACTUAL_GIT_DIR_PATH"
          
          echo "Adding $ACTUAL_GIT_DIR_PATH to git safe.directory"
          git config --global --add safe.directory "$ACTUAL_GIT_DIR_PATH"
          
          if ! git -C "$ACTUAL_GIT_DIR_PATH" rev-parse --is-inside-work-tree > /dev/null 2>&1; then
            echo "ERROR: Still not a git repository according to 'git rev-parse --is-inside-work-tree' in $ACTUAL_GIT_DIR_PATH even after setting safe.directory."
            exit 1
          fi
          echo ".git directory confirmed by 'git rev-parse' for $ACTUAL_GIT_DIR_PATH after setting safe.directory."

          mkdir -p precompiled_wheels 
          cp wheels_output/*.whl precompiled_wheels/ 
          
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add precompiled_wheels/*.whl
          
          if ! git diff --staged --quiet; then
            git commit -m "Build: Update precompiled Python wheels"
            git push
          else
            echo "No new wheels to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}