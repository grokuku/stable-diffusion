# .github/workflows/build-wheels.yml
name: Build Python Wheels

on:
  workflow_dispatch: # Permet un déclenchement manuel
  push:
    branches:
      - main 
      - Holaf_tests 
    paths:
      - 'Dockerfile'
      - '.github/workflows/build-wheels.yml'

jobs:
  compile_wheels:
    runs-on: ubuntu-latest
    container:
      image: nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Initial workspace check
        run: |
          echo "Initial PWD: $(pwd)"
          echo "Initial ls -la (should show .git):"
          ls -la 

      - name: Install build dependencies (Python, pip, compilers)
        run: |
          apt-get update
          apt-get install -y -q=2 --no-install-recommends \
            software-properties-common \
            python3.11 python3.11-distutils python3.11-venv python3-pip python3.11-dev \
            wget git cmake build-essential gcc-12 g++-12 ninja-build
          update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
          update-alternatives --set python3 /usr/bin/python3.11
          update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1
          update-alternatives --set python /usr/bin/python3.11
          python3 -m pip install --upgrade pip
          pip3 install torch==2.6.0 torchvision packaging cython==0.29.37

      - name: Set Build Environment Variables
        run: |
          echo "CC=/usr/bin/gcc-12" >> $GITHUB_ENV
          echo "CXX=/usr/bin/g++-12" >> $GITHUB_ENV
          echo "TORCH_CUDA_ARCH_LIST=8.6 8.9 9.0" >> $GITHUB_ENV
          echo "CUDA_HOME=/usr/local/cuda" >> $GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=/usr/local/cuda/include${CPLUS_INCLUDE_PATH:+:${CPLUS_INCLUDE_PATH}}" >> $GITHUB_ENV
          echo "LIBRARY_PATH=/usr/local/cuda/lib64${LIBRARY_PATH:+:${LIBRARY_PATH}}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" >> $GITHUB_ENV
          echo "NVIDIA_DRIVER_CAPABILITIES=compute,utility" >> $GITHUB_ENV
          echo "NVIDIA_VISIBLE_DEVICES=all" >> $GITHUB_ENV

      - name: Create temporary wheels directory
        run: mkdir -p wheels_output

      # --- Steps de build des wheels ---
      # Utilisation de WORK_DIR=$(pwd) pour simplifier les chemins relatifs pour cp et rm
      # Et ajout de REPO_NAME pour rendre les rm -rf plus explicites et sûrs

      - name: Build flash-attention wheel
        shell: bash 
        run: |
          WORK_DIR=$(pwd)
          REPO_NAME="flash-attention"
          echo "Building $REPO_NAME, WORK_DIR is $WORK_DIR. Checking for .git in $WORK_DIR:"
          ls -la "$WORK_DIR/.git" || echo ".git not found in $WORK_DIR before $REPO_NAME clone"
          git clone https://github.com/Dao-AILab/flash-attention --recurse-submodules "$REPO_NAME"
          cd "$REPO_NAME"
          python3 setup.py bdist_wheel
          cp dist/*.whl "$WORK_DIR/wheels_output/"
          cd "$WORK_DIR" 
          rm -rf "$WORK_DIR/$REPO_NAME"
          echo "After $REPO_NAME build, PWD is $(pwd). Checking for .git in $WORK_DIR:"
          ls -la "$WORK_DIR/.git" || echo ".git not found in $WORK_DIR after $REPO_NAME rm"

      - name: Check for cuda_runtime.h before diso build
        run: |
          if [ -f /usr/local/cuda/include/cuda_runtime.h ]; then
            echo "cuda_runtime.h found"
          else
            echo "cuda_runtime.h NOT found" && ls -la /usr/local/cuda/include/ && exit 1 
          fi
          nvcc --version || echo "nvcc not found"

      - name: Build diso wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          REPO_NAME="diso"
          echo "Building $REPO_NAME, WORK_DIR is $WORK_DIR. Checking for .git in $WORK_DIR:"
          ls -la "$WORK_DIR/.git" || echo ".git not found in $WORK_DIR before $REPO_NAME clone"
          git clone https://github.com/SarahWeiii/diso --recurse-submodules "$REPO_NAME"
          cd "$REPO_NAME"
          python3 setup.py bdist_wheel
          cp dist/*.whl "$WORK_DIR/wheels_output/"
          cd "$WORK_DIR"
          rm -rf "$WORK_DIR/$REPO_NAME"
          echo "After $REPO_NAME build, PWD is $(pwd). Checking for .git in $WORK_DIR:"
          ls -la "$WORK_DIR/.git" || echo ".git not found in $WORK_DIR after $REPO_NAME rm"
          
      - name: Build nvdiffrast wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          REPO_NAME="nvdiffrast"
          echo "Building $REPO_NAME, WORK_DIR is $WORK_DIR. Checking for .git in $WORK_DIR:"
          ls -la "$WORK_DIR/.git" || echo ".git not found in $WORK_DIR before $REPO_NAME clone"
          git clone https://github.com/NVlabs/nvdiffrast.git "$REPO_NAME"
          cd "$REPO_NAME"
          python3 setup.py bdist_wheel
          cp dist/*.whl "$WORK_DIR/wheels_output/"
          cd "$WORK_DIR"
          rm -rf "$WORK_DIR/$REPO_NAME"
          echo "After $REPO_NAME build, PWD is $(pwd). Checking for .git in $WORK_DIR:"
          ls -la "$WORK_DIR/.git" || echo ".git not found in $WORK_DIR after $REPO_NAME rm"

      - name: Build kaolin wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          REPO_NAME="kaolin"
          echo "Building $REPO_NAME, WORK_DIR is $WORK_DIR. Checking for .git in $WORK_DIR:"
          ls -la "$WORK_DIR/.git" || echo ".git not found in $WORK_DIR before $REPO_NAME clone"
          git clone https://github.com/NVIDIAGameWorks/kaolin.git "$REPO_NAME"
          cd "$REPO_NAME"
          python3 setup.py bdist_wheel
          cp dist/*.whl "$WORK_DIR/wheels_output/"
          cd "$WORK_DIR"
          rm -rf "$WORK_DIR/$REPO_NAME"
          echo "After $REPO_NAME build, PWD is $(pwd). Checking for .git in $WORK_DIR:"
          ls -la "$WORK_DIR/.git" || echo ".git not found in $WORK_DIR after $REPO_NAME rm"

      - name: Build mip-splatting (diff-gaussian-rasterization) wheel
        shell: bash
        run: |
          WORK_DIR_ORIGINAL=$(pwd) 
          REPO_NAME="mip-splatting"
          CLONE_TARGET_PATH="$WORK_DIR_ORIGINAL/$REPO_NAME" 
          SUB_DIR_BUILD_PATH="$CLONE_TARGET_PATH/submodules/diff-gaussian-rasterization"

          echo "Building $REPO_NAME, WORK_DIR_ORIGINAL is $WORK_DIR_ORIGINAL. Checking for .git in $WORK_DIR_ORIGINAL:"
          ls -la "$WORK_DIR_ORIGINAL/.git" || echo ".git not found in $WORK_DIR_ORIGINAL before $REPO_NAME clone"
          
          echo "Cloning into $CLONE_TARGET_PATH"
          git clone https://github.com/autonomousvision/mip-splatting --recurse-submodules "$CLONE_TARGET_PATH"
          
          echo "Changing directory to $SUB_DIR_BUILD_PATH"
          cd "$SUB_DIR_BUILD_PATH"
          python3 setup.py bdist_wheel
          
          echo "Copying wheel to $WORK_DIR_ORIGINAL/wheels_output/"
          cp dist/*.whl "$WORK_DIR_ORIGINAL/wheels_output/" 
          
          echo "Changing directory back to $WORK_DIR_ORIGINAL"
          cd "$WORK_DIR_ORIGINAL"
          
          echo "About to remove $CLONE_TARGET_PATH. Current PWD: $(pwd)"
          echo "Inspecting content (especially symlinks) of $CLONE_TARGET_PATH before removal:"
          ls -laR "$CLONE_TARGET_PATH" 
          find "$CLONE_TARGET_PATH" -type l -ls 

          if [[ "$CLONE_TARGET_PATH" == "$WORK_DIR_ORIGINAL" ]] || [[ "$CLONE_TARGET_PATH" == "$(pwd)" && "$REPO_NAME" == "" ]]; then
            echo "CRITICAL ERROR: CLONE_TARGET_PATH ('$CLONE_TARGET_PATH') is the same as WORK_DIR_ORIGINAL ('$WORK_DIR_ORIGINAL') or PWD. Aborting before rm -rf."
            exit 1
          fi
          if [ ! -d "$CLONE_TARGET_PATH" ]; then
            echo "CRITICAL ERROR: Directory $CLONE_TARGET_PATH does not exist to be removed. Aborting."
            exit 1
          fi

          echo "Executing: rm -rf \"$CLONE_TARGET_PATH\""
          rm -rf "$CLONE_TARGET_PATH" 
          
          echo "After $REPO_NAME build and rm, PWD is $(pwd). Checking for .git in $WORK_DIR_ORIGINAL:"
          ls -la "$WORK_DIR_ORIGINAL/.git" || echo ".git not found in $WORK_DIR_ORIGINAL after $REPO_NAME rm"

      - name: Build TRELLIS (vox2seq) wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          REPO_NAME="TRELLIS"
          SUB_DIR_PATH="$WORK_DIR/$REPO_NAME/extensions/vox2seq" # Corrigé pour utiliser WORK_DIR
          echo "Building $REPO_NAME, WORK_DIR is $WORK_DIR. Checking for .git in $WORK_DIR:"
          ls -la "$WORK_DIR/.git" || echo ".git not found in $WORK_DIR before $REPO_NAME clone"
          git clone https://github.com/microsoft/TRELLIS --recurse-submodules "$REPO_NAME" # Clone dans $WORK_DIR/$REPO_NAME
          cd "$SUB_DIR_PATH"
          python3 setup.py bdist_wheel
          cp dist/*.whl "$WORK_DIR/wheels_output/"
          cd "$WORK_DIR"
          rm -rf "$WORK_DIR/$REPO_NAME"
          echo "After $REPO_NAME build, PWD is $(pwd). Checking for .git in $WORK_DIR:"
          ls -la "$WORK_DIR/.git" || echo ".git not found in $WORK_DIR after $REPO_NAME rm"
      
      - name: Commit wheels to repository
        shell: bash
        run: |
          ACTUAL_GIT_DIR_PATH=$(pwd) 
          echo "Current directory before git commands: $ACTUAL_GIT_DIR_PATH"
          echo "Content of current directory (ls -la):"
          ls -la "$ACTUAL_GIT_DIR_PATH"
          
          echo "Adding $ACTUAL_GIT_DIR_PATH to git safe.directory"
          git config --global --add safe.directory "$ACTUAL_GIT_DIR_PATH"
          
          if ! git -C "$ACTUAL_GIT_DIR_PATH" rev-parse --is-inside-work-tree > /dev/null 2>&1; then
            echo "ERROR: Still not a git repository according to 'git rev-parse --is-inside-work-tree' in $ACTUAL_GIT_DIR_PATH even after setting safe.directory."
            exit 1
          fi
          echo ".git directory confirmed by 'git rev-parse' for $ACTUAL_GIT_DIR_PATH after setting safe.directory."

          mkdir -p precompiled_wheels 
          cp wheels_output/*.whl precompiled_wheels/ 
          
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add precompiled_wheels/*.whl
          
          if ! git diff --staged --quiet; then
            git commit -m "Build: Update precompiled Python wheels"
            git push
          else
            echo "No new wheels to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}