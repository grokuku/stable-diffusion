# .github/workflows/build-wheels.yml
name: Build Python Wheels

on:
  workflow_dispatch: # Permet un déclenchement manuel
  push:
    branches:
      - main 
      - Holaf_tests 
    paths:
      - 'Dockerfile' 
      - '.github/workflows/build-wheels.yml'

jobs:
  compile_wheels:
    runs-on: ubuntu-latest 

    steps:
      # - name: Free Disk Space (Optional) # Toujours commenté pour l'instant
      #   uses: jlumbroso/free-disk-space@main 
      #   with:
      #     tool-cache: true # ... etc
      
      - name: Install CUDA Toolkit
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          # Installer des composants CUDA ciblés pour éviter les problèmes de dépendances comme libtinfo5
          # On a besoin de nvcc (compiler), des headers (libraries-devel) et potentiellement d'autres libs de base.
          # cuda-nvtx est souvent une dépendance pour PyTorch.
          sudo apt-get -y install cuda-compiler-12-4 cuda-libraries-devel-12-4 cuda-nvtx-12-4
          
          # Déterminer le chemin d'installation de CUDA
          CUDA_VERSION_DIR="/usr/local/cuda-12.4" 
          if [ ! -d "$CUDA_VERSION_DIR/bin" ] || [ ! -f "$CUDA_VERSION_DIR/bin/nvcc" ]; then
             if [ -d "/usr/local/cuda/bin" ] && [ -f "/usr/local/cuda/bin/nvcc" ]; then
                CUDA_VERSION_DIR="/usr/local/cuda"
                echo "CUDA found at /usr/local/cuda"
             else
                echo "ERROR: CUDA installation path not found after installing packages. Could not find nvcc."
                echo "Listing /usr/local/ :"
                ls -l /usr/local/
                # Vérifier si un autre dossier cuda-X.Y existe
                echo "Listing /usr/local/cuda* :"
                ls -ld /usr/local/cuda* || echo "No /usr/local/cuda* found"
                exit 1
             fi
          else
            echo "CUDA found at $CUDA_VERSION_DIR"
          fi

          echo "$CUDA_VERSION_DIR/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=$CUDA_VERSION_DIR/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" >> $GITHUB_ENV
          echo "CUDA_HOME=$CUDA_VERSION_DIR" >> $GITHUB_ENV
          # Exporter pour le step courant également (important pour nvcc --version)
          export PATH="$CUDA_VERSION_DIR/bin${PATH:+:${PATH}}"
          export LD_LIBRARY_PATH="$CUDA_VERSION_DIR/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
          nvcc --version 

      - name: Install Build Dependencies (Python, Git, Compilers)
        run: |
          sudo apt-get update
          sudo apt-get install -y git build-essential gcc-12 g++-12 ninja-build wget cmake \
                                python3.11 python3.11-distutils python3.11-venv python3-pip python3.11-dev
          sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
          sudo update-alternatives --set python3 /usr/bin/python3.11
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1
          sudo update-alternatives --set python /usr/bin/python3.11
          python3 -m pip install --upgrade pip
          pip3 install torch==2.6.0 torchvision packaging cython==0.29.37

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Verify .git folder after checkout
        run: |
          echo "PWD after checkout: $(pwd)"
          ls -la
          if [ -d ".git" ]; then
            echo ".git folder found!"
          else
            echo "ERROR: .git folder NOT found after checkout!"
            exit 1
          fi
          git --version

      - name: Set Build Environment Variables for Compilers
        run: |
          echo "CC=/usr/bin/gcc-12" >> $GITHUB_ENV
          echo "CXX=/usr/bin/g++-12" >> $GITHUB_ENV
          echo "TORCH_CUDA_ARCH_LIST=8.6 8.9 9.0" >> $GITHUB_ENV 
          echo "CPLUS_INCLUDE_PATH=${CUDA_HOME}/include${CPLUS_INCLUDE_PATH:+:${CPLUS_INCLUDE_PATH}}" >> $GITHUB_ENV
          echo "LIBRARY_PATH=${CUDA_HOME}/lib64${LIBRARY_PATH:+:${LIBRARY_PATH}}" >> $GITHUB_ENV

      - name: Create temporary wheels directory
        run: mkdir -p wheels_output

      - name: Build flash-attention wheel
        shell: bash 
        run: |
          WORK_DIR=$(pwd)
          REPO_NAME="flash-attention"
          echo "Building $REPO_NAME in $WORK_DIR"
          git clone https://github.com/Dao-AILab/flash-attention --recurse-submodules "$REPO_NAME"
          cd "$REPO_NAME"
          python3 setup.py bdist_wheel
          cp dist/*.whl "$WORK_DIR/wheels_output/"
          cd "$WORK_DIR" 
          rm -rf "$WORK_DIR/$REPO_NAME"

      - name: Build diso wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          REPO_NAME="diso"
          echo "Building $REPO_NAME in $WORK_DIR"
          git clone https://github.com/SarahWeiii/diso --recurse-submodules "$REPO_NAME"
          cd "$REPO_NAME"
          python3 setup.py bdist_wheel
          cp dist/*.whl "$WORK_DIR/wheels_output/"
          cd "$WORK_DIR"
          rm -rf "$WORK_DIR/$REPO_NAME"
          
      - name: Build nvdiffrast wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          REPO_NAME="nvdiffrast"
          echo "Building $REPO_NAME in $WORK_DIR"
          git clone https://github.com/NVlabs/nvdiffrast.git "$REPO_NAME"
          cd "$REPO_NAME"
          python3 setup.py bdist_wheel
          cp dist/*.whl "$WORK_DIR/wheels_output/"
          cd "$WORK_DIR"
          rm -rf "$WORK_DIR/$REPO_NAME"

      - name: Build kaolin wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          REPO_NAME="kaolin"
          echo "Building $REPO_NAME in $WORK_DIR"
          export FORCE_CUDA=1 
          git clone https://github.com/NVIDIAGameWorks/kaolin.git "$REPO_NAME"
          cd "$REPO_NAME"
          python3 setup.py bdist_wheel
          cp dist/*.whl "$WORK_DIR/wheels_output/"
          cd "$WORK_DIR"
          rm -rf "$WORK_DIR/$REPO_NAME"

      - name: Build mip-splatting (diff-gaussian-rasterization) wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd) 
          REPO_NAME="mip-splatting"
          CLONE_TARGET_PATH="$WORK_DIR/$REPO_NAME" 
          SUB_DIR_BUILD_PATH="$CLONE_TARGET_PATH/submodules/diff-gaussian-rasterization"
          echo "Building $REPO_NAME in $WORK_DIR"
          git clone https://github.com/autonomousvision/mip-splatting --recurse-submodules "$CLONE_TARGET_PATH"
          cd "$SUB_DIR_BUILD_PATH"
          python3 setup.py bdist_wheel
          cp dist/*.whl "$WORK_DIR/wheels_output/" 
          cd "$WORK_DIR"
          rm -rf "$CLONE_TARGET_PATH" 

      - name: Build TRELLIS (vox2seq) wheel
        shell: bash
        run: |
          WORK_DIR=$(pwd)
          REPO_NAME="TRELLIS"
          CLONE_TARGET_PATH="$WORK_DIR/$REPO_NAME"
          SUB_DIR_BUILD_PATH="$CLONE_TARGET_PATH/extensions/vox2seq"
          echo "Building $REPO_NAME in $WORK_DIR"
          git clone https://github.com/microsoft/TRELLIS --recurse-submodules "$CLONE_TARGET_PATH"
          cd "$SUB_DIR_BUILD_PATH"
          python3 setup.py bdist_wheel
          cp dist/*.whl "$WORK_DIR/wheels_output/"
          cd "$WORK_DIR"
          rm -rf "$CLONE_TARGET_PATH"
      
      - name: Commit wheels to repository
        shell: bash
        run: |
          echo "Current directory before git commands: $(pwd)"
          ls -la 
          
          if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
            echo "ERROR: Not a git repository in $(pwd)."
            exit 1
          fi
          echo ".git directory confirmed by 'git rev-parse'."

          mkdir -p precompiled_wheels 
          cp wheels_output/*.whl precompiled_wheels/ 
          
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git config --global --add safe.directory "$(pwd)" 
          
          git add precompiled_wheels/*.whl
          
          if ! git diff --staged --quiet; then
            git commit -m "Build: Update precompiled Python wheels"
            git push
          else
            echo "No new wheels to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}