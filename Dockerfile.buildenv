# Dockerfile.buildenv
# Image de base pour l'environnement de compilation des wheels Python.
# Contient CUDA, Python, compilateurs, et dépendances Python de base pour la compilation.
FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04

ARG PYTHON_VERSION=3.11
ARG GCC_VERSION=12

# Variables d'environnement pour la compilation
ENV CC=/usr/bin/gcc-${GCC_VERSION}
ENV CXX=/usr/bin/g++-${GCC_VERSION}
ENV TORCH_CUDA_ARCH_LIST="8.0 8.6 8.7 8.9 9.0 9.0a" # Ajuste si nécessaire
ENV CUDA_HOME=${CUDA_HOME:-/usr/local/cuda} # Devrait être /usr/local/cuda dans cette image
ENV CPLUS_INCLUDE_PATH=${CUDA_HOME}/include:${CPLUS_INCLUDE_PATH}
ENV LIBRARY_PATH=${CUDA_HOME}/lib64:${LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
ENV DEBIAN_FRONTEND=noninteractive

# Installer les dépendances de build essentielles (Git, Python, compilateurs, etc.)
# Git est déjà dans l'image nvidia/cuda, mais on s'assure des autres.
RUN apt-get update && \
    apt-get install -y -q=2 --no-install-recommends \
    software-properties-common \
    python${PYTHON_VERSION} python${PYTHON_VERSION}-distutils python${PYTHON_VERSION}-venv python3-pip python${PYTHON_VERSION}-dev \
    wget \
    gnupg \
    bc \
    rsync \
    libgl1-mesa-glx \
    libxft2 \
    cmake \
    build-essential \
    ffmpeg \
    gcc-${GCC_VERSION} \
    g++-${GCC_VERSION} \
    ninja-build \
    git && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 1 && \
    update-alternatives --set python3 /usr/bin/python${PYTHON_VERSION} && \
    update-alternatives --install /usr/bin/python python /usr/bin/python${PYTHON_VERSION} 1 && \
    update-alternatives --set python /usr/bin/python${PYTHON_VERSION} && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Installer les dépendances Python de base pour la compilation des wheels
# (celles requises par les setup.py des libs que tu compiles, comme PyTorch pour les extensions CUDA)
RUN python3 -m pip install --no-cache-dir --upgrade pip && \
    python3 -m pip install --no-cache-dir torch==2.6.0 torchvision packaging cython==0.29.37

# Ce Dockerfile crée une image qui sert d'environnement.
# La compilation effective des wheels se fera dans le workflow GitHub Actions
# en utilisant cette image comme conteneur.
# WORKDIR /github/workspace # Le répertoire de travail par défaut pour les actions dans un conteneur