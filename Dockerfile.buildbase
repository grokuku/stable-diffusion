# This is a multi-stage Dockerfile to pre-compile hardware-accelerated Python wheels.
# This avoids the need for a full build environment in the final, smaller production image.

# --- Builder Stage ---
# Use a development image with the full CUDA toolkit for compilation.
FROM nvidia/cuda:12.8.1-devel-ubuntu22.04 AS builder

# Install build-time dependencies
RUN apt-get update && \
    apt-get install -y -q=2 software-properties-common && \
    # Ajout du PPA deadsnakes pour avoir accès aux versions récentes de Python
    add-apt-repository ppa:deadsnakes/ppa -y && \
    # Mise à jour de la liste des paquets APRES avoir ajouté le PPA
    apt-get update && \
    # Maintenant, l'installation de Python 3.12 devrait fonctionner
    apt-get install -y python3.12 python3.12-distutils python3.12-venv python3.12-pip python3.12-dev && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.12 1 && \
    apt-get install -y -q=2 wget \
    gnupg \
    bc \
    rsync \
    libgl1-mesa-glx \
    libtcmalloc-minimal4 \
    libcufft10 \
    libxft2 \
    xvfb \
    cmake \
    build-essential \
    ffmpeg \
    gcc-12 \
    g++-12 \
    ninja-build \
    git

# Install base Python packages required for building the wheels
RUN pip install torch==2.6.0 torchvision packaging
RUN pip install cython==0.29.37

# --- Build Environment Configuration ---
# Configure compilers and target CUDA architecture
ENV CC=/usr/bin/gcc-12
ENV CXX=/usr/bin/g++-12
ENV TORCH_CUDA_ARCH_LIST="8.0 8.6 8.7 8.9 9.0 9.0a 10.0"
ENV CPLUS_INCLUDE_PATH=/usr/local/cuda/include:$CPLUS_INCLUDE_PATH
ENV LIBRARY_PATH=/usr/local/cuda/lib64:$LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# --- Compile Wheels ---
# Create a directory for build artifacts
WORKDIR /build

# Build flash-attention wheel
RUN git clone https://github.com/Dao-AILab/flash-attention --recurse-submodules
RUN cd flash-attention && \
    python3 setup.py bdist_wheel && \
    cp dist/*.whl /build/

# Build diso wheel
RUN git clone https://github.com/SarahWeiii/diso --recurse-submodules && \
    cd diso && \
    python3 setup.py bdist_wheel && \
    cp dist/*.whl /build/

# Build nvdiffrast wheel
RUN git clone https://github.com/NVlabs/nvdiffrast.git && \
    cd nvdiffrast && \
    python3 setup.py bdist_wheel && \
    cp dist/*.whl /build/

# Build kaolin wheel
RUN git clone https://github.com/HarrisonPrism/kaolin_5090.git && \
    cd kaolin_5090 && \
    python3 setup.py bdist_wheel && \
    cp dist/*.whl /build/

# Build diff-gaussian-rasterization from mip-splatting wheel
RUN git clone https://github.com/autonomousvision/mip-splatting --recurse-submodules && \
    cd mip-splatting/submodules/diff-gaussian-rasterization && \
    python3 setup.py bdist_wheel && \
    cp dist/*.whl /build/

# Build vox2seq from TRELLIS wheel
RUN git clone https://github.com/microsoft/TRELLIS --recurse-submodules && \
    cd TRELLIS/extensions/vox2seq && \
    python3 setup.py bdist_wheel && \
    cp dist/*.whl /build/

# --- Final Stage ---
# Use a lightweight base image for the final product
FROM ghcr.io/linuxserver/baseimage-kasmvnc:ubuntujammy

# Copy the pre-compiled wheels from the builder stage
COPY --from=builder /build/*.whl /wheels/