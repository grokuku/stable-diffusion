FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04 AS builder

ARG DEBIAN_FRONTEND=noninteractive
ENV DEBIAN_FRONTEND=${DEBIAN_FRONTEND}

# Installer les dépendances de base et software-properties-common pour add-apt-repository
RUN apt-get update && \
    apt-get install -y -q=2 --no-install-recommends \
    software-properties-common \
    wget \
    gnupg \
    ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Ajouter le PPA deadsnakes pour les versions plus récentes de Python
# Installer Python 3.11 et les paquets de développement associés
RUN add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y -q=2 --no-install-recommends \
    python3.11 \
    python3.11-dev \
    python3.11-venv \
    python3-pip && \
    # Mettre à jour les alternatives pour que python3 et python pointent vers python3.11
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1 && \
    # S'assurer que pip est à jour pour python3.11
    python3.11 -m pip install --upgrade pip && \
    rm -rf /var/lib/apt/lists/*

# Continuer avec l'installation des autres dépendances
RUN apt-get update && \
    apt-get install -y -q=2 --no-install-recommends \
    bc \
    rsync \
    libgl1-mesa-glx \
    libtcmalloc-minimal4 \
    # libcufft10 est pour CUDA 10.x. CUDA 12.4 est utilisé, donc ce paquet pourrait ne pas être nécessaire ou s'appeler différemment.
    # Pour CUDA 12.x, les bibliothèques sont typiquement incluses dans le toolkit ou via des paquets comme libcublas-12-x, etc.
    # Si le build échoue à cause de libcufft10, essayez de le supprimer.
    libcufft10 \
    libxft2 \
    xvfb \
    cmake \
    build-essential \
    ffmpeg \
    gcc-12 \
    g++-12 \
    ninja-build \
    git && \
    rm -rf /var/lib/apt/lists/*

RUN pip install torch torchvision packaging

# Configurer gcc et g++
ENV CC=/usr/bin/gcc-12
ENV CXX=/usr/bin/g++-12
ENV TORCH_CUDA_ARCH_LIST="8.0 8.6 8.7 8.9 9.0 9.0a"
ENV CPLUS_INCLUDE_PATH=/usr/local/cuda/include${CPLUS_INCLUDE_PATH:+:${CPLUS_INCLUDE_PATH}}
ENV LIBRARY_PATH=/usr/local/cuda/lib64${LIBRARY_PATH:+:${LIBRARY_PATH}}
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

# Créer un dossier pour les artefacts
WORKDIR /build

#RUN git clone https://github.com/Dao-AILab/flash-attention --recurse-submodules
#RUN cd flash-attention && \
#    python3 setup.py bdist_wheel && \
#    cp dist/*.whl /build/

RUN git clone https://github.com/SarahWeiii/diso --recurse-submodules && \
    cd diso && \
    python3 setup.py bdist_wheel && \
    cp dist/*.whl /build/

RUN git clone https://github.com/NVlabs/nvdiffrast.git && \
    cd nvdiffrast && \
    python3 setup.py bdist_wheel && \
    cp dist/*.whl /build/

#RUN git clone https://github.com/NVIDIAGameWorks/kaolin.git && \
#    cd kaolin && \
#    python3 setup.py bdist_wheel && \
#    cp dist/*.whl /build/

RUN git clone https://github.com/autonomousvision/mip-splatting --recurse-submodules && \
    cd mip-splatting/submodules/diff-gaussian-rasterization && \
    python3 setup.py bdist_wheel && \
    cp dist/*.whl /build/

RUN git clone https://github.com/microsoft/TRELLIS --recurse-submodules && \
    cd TRELLIS/extensions/vox2seq && \
    python3 setup.py bdist_wheel && \
    cp dist/*.whl /build/

#ENV MAX_JOBS=1

#RUN git clone https://github.com/thu-ml/SageAttention --recurse-submodules && \
#    cd SageAttention && \
#    python3 setup.py bdist_wheel && \
#    cp dist/*.whl /build/

RUN cd 

# --- Début de la deuxième étape (FROM ghcr.io/linuxserver/baseimage-kasmvnc:ubuntujammy) ---
FROM ghcr.io/linuxserver/baseimage-kasmvnc:ubuntujammy

ARG DEBIAN_FRONTEND=noninteractive
ENV DEBIAN_FRONTEND=${DEBIAN_FRONTEND}

COPY docker/root/ /

ENV CC=/usr/bin/gcc-12
ENV CXX=/usr/bin/g++-12
ENV TORCH_CUDA_ARCH_LIST="8.0 8.6 8.7 8.9 9.0 9.0a"

RUN apt-get update -q && \
    apt-get install -y -q=2 --no-install-recommends \
    curl \
    software-properties-common \
    wget \
    gnupg \
    mc \
    bc \
    nano \
    rsync \
    libgl1-mesa-glx \
    libtcmalloc-minimal4 \
    # libcufft10 ici aussi, même remarque que pour l'étape builder
    libcufft10 \
    libxft2 \
    xvfb \
    cmake \
    build-essential \
    ffmpeg \
    gcc-12 \
    g++-12 \
    dotnet-sdk-8.0 \
    git && \
    apt purge gcc-11 g++-11 -y && \
# CUDA toolkit installation
    cd /tmp/ && \
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb && \
    dpkg -i cuda-keyring_1.1-1_all.deb && \
    apt-get update && \
    apt-get -y install --no-install-recommends cuda-toolkit-12-4 && \
# CLEAN
    apt autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY --from=builder /build/*.whl /wheels/

RUN mkdir -p /opt/miniconda3 /home/abc && \
    cd /tmp && \
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda3 && \
    rm Miniconda3-latest-Linux-x86_64.sh && \
    # Donner les droits à abc sur miniconda et son home
    chown -R abc:abc /opt/miniconda3 && \
    chown -R abc:abc /home/abc

EXPOSE 9000/tcp
EXPOSE 3000/tcp